<?php

class Modelo
{
    protected $tabla;
    protected $conexion;
    protected $atributos = [];

    public function __construct($datos = [])
    {
        $this->conexion = BaseDatos::obtenerConexion();
        $this->tabla = Convenciones::convertirClaseATabla(strtolower((new \ReflectionClass($this))->getShortName()), true);  // Tabla en plural

        if (isset($datos['id'])) {
            // Intentar cargar datos desde la BD
            $registro = $this->conexion->get($this->tabla, '*', ['id' => $datos['id']]);
            if ($registro) {
                $this->atributos = $registro; // Cargar datos de la BD
            } else {
                $this->atributos['id'] = $datos['id']; // Si no existe, se almacena el id para futura inserción
            }
        } else {
            // Si no hay id, simplemente se inicializa el objeto con los datos dados
            $this->atributos = $datos;
        }
    }

    public function __set($campo, $valor)
    {
        $this->atributos[$campo] = $valor;
    }

    public function __get($campo)
    {
        return $this->atributos[$campo] ?? null;
    }

    public function guardar()
    {
        if (isset($this->atributos['id']) && $this->existe()) {
            return $this->actualizar();
        } else {
            return $this->insertar();
        }
    }

    protected function insertar()
    {
        $this->atributos['fecha_creacion'] = date('Y-m-d H:i:s');
        $this->conexion->insert($this->tabla, $this->atributos);
        $this->atributos['id'] = $this->conexion->id();
        return true;
    }

    protected function actualizar()
    {
        $this->atributos['fecha_actualizacion'] = date('Y-m-d H:i:s');
        return $this->conexion->update($this->tabla, $this->atributos, ['id' => $this->atributos['id']]);
    }

    public function eliminar()
    {
        if (!isset($this->atributos['id'])) {
            return false;
        }
        $this->atributos['fecha_eliminacion'] = date('Y-m-d H:i:s');
        return $this->conexion->update($this->tabla, $this->atributos, ['id' => $this->atributos['id']]);
    }

    public static function todos()
    {
        $instancia = new static();
        $datos = $instancia->conexion->select($instancia->tabla, '*');
        return array_map(fn($row) => new static($row), $datos);
    }

    private function existe()
    {
        return $this->conexion->has($this->tabla, ['id' => $this->atributos['id']]);
    }

    // Método para las relaciones "pertenceA"
    public function pertenceA($modelo, $campo)
    {
        $tablaRelacionada = (new $modelo)->tabla;
        $idRelacionado = $this->{$campo};
        $registroRelacionado = $this->conexion->get($tablaRelacionada, '*', ['id' => $idRelacionado]);

        if ($registroRelacionado) {
            return new $modelo($registroRelacionado);
        }

        return null;
    }

    // Método para las relaciones "tieneMuchos"
    public function tieneMuchos($modelo, $campo)
    {
        $tablaRelacionada = (new $modelo)->tabla;
        $idRelacionado = $this->atributos['id'];
        $registrosRelacionados = $this->conexion->select($tablaRelacionada, '*', [$campo => $idRelacionado]);

        return array_map(fn($registro) => new $modelo($registro), $registrosRelacionados);
    }

    // Método para las relaciones "tieneUno"
    public function tieneUno($modelo, $campo)
    {
        $tablaRelacionada = (new $modelo)->tabla;
        $idRelacionado = $this->{$campo};
        $registroRelacionado = $this->conexion->get($tablaRelacionada, '*', ['id' => $idRelacionado]);

        if ($registroRelacionado) {
            return new $modelo($registroRelacionado);
        }

        return null;
    }
}
